= Plugin Changelog = 

= Road Map = 

# improve kill statement analysis
 - needs to be better for 2d 
 - needs to understand scopes otherwise a use will result in a redeclaration
# run other IDE with the plugin ( planned to be done by marc ) 
 - jucicpp 
 - qtcreator 
 - kdevelop 
 - ...
# reduction unparser for hpx
 - does not seem to be easy 
# make it possible to use range based for loops in c++ code
# possible back-end
 - thrust/cuda ( already experimented with )
 - boost.compute
 - std-c++17 parallel ts

== Version 0.10 == 

larger jump in version number due to iterator support

- front-end 
  - pet now supports iterators 
- codegen
  - experimental implementation for thrust/cuda
- clanclang 
  - now statement text analysis searches for 
    iterators and indexes 
- ui
  - nvim works and displays fixits like vim
- testing 
  - gtest code now compiles so that 
    the resulting code can be checked with it
- development
 - can now entirly be done in a development docker container

== Version 0.04 == 

after holidays and a lot of other work:
- container size of the incubus/ycm container down to 1GB 
- updated build process to build with clang 4.0 
  - had to add new symbols to the export list 
- mail to mailing list about the state of libclang ( and the export list ) 
  - clang-tidy seems to have the same problems
- plugin runs in kdevelop 
- plugin runs in qtcreator
- simple libclang client code 
  - transforms warnings from plugins and compiler into linter warnings
  - needs upload via phabricator server side linter
- clang now allows -fplugin=plugin.so instead of -Xclang -load 
  - this makes it easier to load plugins via YouCompleteMe since I dont
    need to disable the Xclang filter and the plugin is automaticaly executed
    after the main TU is done.
- development is now done inside the container environment 
 - load incubus/opt-development
 - was needed since clang is moving to fast
- plugin now has a install target and fits into the other stuff 


== Version 0.03 == 
- due to ISC2016 just some minor changes 
- codegen
 - reduction codegen works for  
  - cilk 
  - tbb
  - hpx needs some other approach


== Version 0.02 == 
- interface plugin
 - it analyzes the outermost loops now ( before all levels )
- codegen
 - tested isls codegen based on a schedule and a set of parameters 
- dependency analysis 
 - basic kill statement analysis for 1d loops implemented
 - problems with: 
  - 2d loops
  - separation of declaration and usage
  - wrong fuse of scopes ( region between braces )
- container ( docker )
 - updated user interface to make it possible to:
  - change the unparser ( cilk, hpx, tbb, openmp, openacc ) by pressing F1, F2, ...
  - apply a fixit by pressing F7

== Version 0.01 == 

- codegen
  - can emit files to include 
  - files are not included twice
- plugin
 - has a basic help printout
 - major refacroring has improved modularity
 - information about statements is now passed via isl_ids user data pointer
- dependency analysis
 - is no based on pollys dependency analysis and supports reductions
 - plutos analysis is still available
- pet
 - can now analyse for different reduction types ( + , * ... )
 - understands auto type 
- containers ( docker )
 - full upload of all containers to dockerhub scheduled every 2 days
 - build works without python3 


== Version 0.00 ==

- in contrast to older approaches the new plugin uses
 - pet as a polyhedral scanner
 - pluto as an optimizer
 - customized unparsing code in pluto for generating
    - hpx
    - cilk 
    - openmp
    - openacc
    - tbb
